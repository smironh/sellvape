from aiogram import  Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import cfg, db, keyboard, json
import logging, asyncio
import requests as r
import random

from cfg import qiwi
from glQiwiApi import QiwiWallet, QiwiWrapper

from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler

scheduler = AsyncIOScheduler()

admin = cfg.admin

logging.basicConfig(level = logging.INFO)

bot = Bot(token = cfg.TOKEN, parse_mode='Markdown')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1] if len(text.split()) > 1 else None

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    markup = await keyboard.osnova()

    unique_code = extract_unique_code(msg.text)
    print(db.check_ref(msg))
    if db.check_ref(msg) is None:
        if unique_code:    
            db.add_ref(msg, unique_code)
            await msg.reply('–ü—Ä–∏–≤–µ—Ç‚ùï –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ò–õ–ò –ó–ê–ë–†–ê–¢–¨ –î–û–°–¢–£–ü –ó–ê 5 –†–ï–§–ï–†–ê–õ–û–í', reply_markup=markup)
        else:
            db.add_ref(msg, None)
            await msg.reply('–ü—Ä–∏–≤–µ—Ç‚ùï –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ò–õ–ò –ó–ê–ë–†–ê–¢–¨ –î–û–°–¢–£–ü –ó–ê 5 –†–ï–§–ï–†–ê–õ–û–í', reply_markup=markup)
    else:
        await msg.reply('–ü—Ä–∏–≤–µ—Ç‚ùï –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ò–õ–ò –ó–ê–ë–†–ê–¢–¨ –î–û–°–¢–£–ü –ó–ê 5 –†–ï–§–ï–†–ê–õ–û–í', reply_markup=markup)

@dp.message_handler(commands=['new'])
async def scheduled(msg: types.Message):
    if msg.chat.id == int(admin):
        Factor = 1       # –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –ø–∞—Ä—Å–∏—Ç—Å—è –∑–∞ —Ä–∞–∑ (–ó–∞ –ø—Ä–æ—Ö–æ–¥–∫—É –±–æ–ª–µ–µ 100 –≤—Ä–æ–¥–µ –Ω–µ –ø–∞—Ä—Å–∏—Ç)
        Filter = 'hentai'
        c = 0

        data = '{"query":" query SubredditQuery( $url: String! $filter: SubredditPostFilter $iterator: String ) { getSubreddit(url: $url) { children( limit: 999999 iterator: $iterator filter: $filter disabledHosts: null ) { iterator items { __typename url title subredditTitle subredditUrl redditPath isNsfw albumUrl isFavorite mediaSources { url width height isOptimized } } } } } ","variables":{"url":"/r/'+str(Filter)+'","limit": '+str(Factor)+',"filter":"PICTURE","hostsDown":null},"authorization":null}'
        resp = r.post('https://api.scrolller.com/api/v2/graphql', data=data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
        data_images = json.loads(resp.text)
        for item in data_images['data']['getSubreddit']['children']['items']:
            url = item['mediaSources'][len(item['mediaSources'])-1]['url']
            print(url)
            c += 1
            if c == 1:
                break
        await bot.send_photo(-1001891127901, photo=url,  caption = '[üîû–°–∞–º—ã–µ —Å–æ—á–Ω—ã–µ —Ñ—É–ª—ãüîû](https://t.me/benzporn_robot?start=channel)')
        await bot.send_video(msg.chat.id, video = '')
        await msg.answer('–£—Å–ø–µ—à–Ω–æ!')
    else:
        pass

@dp.callback_query_handler(lambda c: c.data == 'give')
async def next(c: types.CallbackQuery):
    await bot.answer_callback_query(c.id)

    await c.message.delete()
    if db.profile()[0] < 5:
        await c.message.answer('–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!')
    else:
        await c.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!')
        chat_id = -1001506130892
        expire_date = datetime.now() + timedelta(days=1)
        link = await bot.create_chat_invite_link(chat_id, expire_date.timestamp, 1)

        await c.message.answer(link.invite_link)

@dp.message_handler(content_types=['text'])
async def ref(msg: types.Message):
    if msg.text == 'üë∑‚Äç‚ôÇÔ∏è–†–µ—Ñ–µ—Ä–∞–ª—ã':
        markup = keyboard.ref()

        info = db.profile(msg)

        await msg.answer(f'''
–í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ `https://t.me/benzporn_robot?start={msg.chat.id}`

–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ {info[0]}
–ü—Ä–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!
''', reply_markup = markup)
    if msg.text == 'üî®–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø':
        async with QiwiWrapper(secret_p2p = qiwi) as w:
            bill = await w.create_p2p_bill(
            amount = 99,
            comment = f'–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å—É–º–º—É {msg.text}\n–ö–æ–¥ - {random.randint(100, 999)}',
            life_time = datetime.now() + timedelta(minutes = 10))

            check = await w.check_p2p_bill_status(bill_id = bill.id)
            markup = InlineKeyboardMarkup().add(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å 99–†', url = bill.pay_url))

            await msg.answer(f'–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á–µ—Ç, —É –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç –Ω–∞ –µ–≥–æ –æ–ø–ª–∞—Ç—É!', reply_markup=markup)
            while True:

                if check == "PAID":
                    chat_id = -1001506130892
                    expire_date = datetime.now() + timedelta(days=1)
                    link = await bot.create_chat_invite_link(chat_id, expire_date.timestamp, 1)

                    await msg.reply(link.invite_link)
                    await msg.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–µ–º–∏—É–º–∞!')
                    break
                            
                if check == 'EXPIRED':
                    await msg.answer('–í—ã –Ω–µ —É—Å–ø–µ–ª–∏(')
                    break


async def scheduled1():
    Factor = 1       # –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –ø–∞—Ä—Å–∏—Ç—Å—è –∑–∞ —Ä–∞–∑ (–ó–∞ –ø—Ä–æ—Ö–æ–¥–∫—É –±–æ–ª–µ–µ 100 –≤—Ä–æ–¥–µ –Ω–µ –ø–∞—Ä—Å–∏—Ç)
    Filter = 'hentai'
    c = 0

    data = '{"query":" query SubredditQuery( $url: String! $filter: SubredditPostFilter $iterator: String ) { getSubreddit(url: $url) { children( limit: 999999 iterator: $iterator filter: $filter disabledHosts: null ) { iterator items { __typename url title subredditTitle subredditUrl redditPath isNsfw albumUrl isFavorite mediaSources { url width height isOptimized } } } } } ","variables":{"url":"/r/'+str(Filter)+'","limit": '+str(Factor)+',"filter":"PICTURE","hostsDown":null},"authorization":null}'
    resp = r.post('https://api.scrolller.com/api/v2/graphql', data=data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
    data_images = json.loads(resp.text)
    for item in data_images['data']['getSubreddit']['children']['items']:
        url = item['mediaSources'][len(item['mediaSources'])-1]['url']
        print(url)
        c += 1
        if c == 1:
            break
    await bot.send_photo(-1001891127901, photo=url,  caption = '[üîû–°–∞–º—ã–µ —Å–æ—á–Ω—ã–µ —Ñ—É–ª—ãüîû](https://t.me/benzporn_robot?start=channel)')


async def scheduleds():
    Factor = 1       # –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –ø–∞—Ä—Å–∏—Ç—Å—è –∑–∞ —Ä–∞–∑ (–ó–∞ –ø—Ä–æ—Ö–æ–¥–∫—É –±–æ–ª–µ–µ 100 –≤—Ä–æ–¥–µ –Ω–µ –ø–∞—Ä—Å–∏—Ç)
    Filter = 'nsfw'
    c = 0

    data = '{"query":" query SubredditQuery( $url: String! $filter: SubredditPostFilter $iterator: String ) { getSubreddit(url: $url) { children( limit: 999999 iterator: $iterator filter: $filter disabledHosts: null ) { iterator items { __typename url title subredditTitle subredditUrl redditPath isNsfw albumUrl isFavorite mediaSources { url width height isOptimized } } } } } ","variables":{"url":"/r/'+str(Filter)+'","limit": '+str(Factor)+',"filter":"PICTURE","hostsDown":null},"authorization":null}'
    resp = r.post('https://api.scrolller.com/api/v2/graphql', data=data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
    data_images = json.loads(resp.text)
    for item in data_images['data']['getSubreddit']['children']['items']:
        url = item['mediaSources'][len(item['mediaSources'])-1]['url']
        c += 1
        if c == 1:
            break
    await bot.send_photo(-1001506130892, photo=url,  caption = 'üîûüëÄ')
    print('did')

scheduler.add_job(scheduled1, "interval", seconds=1800)
scheduler.add_job(scheduleds, 'interval', seconds=3600)
scheduler.start()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)